Reading https://www.khronos.org/opengl/wiki/Shader

There are "uniform" values.
  They can be statically uniform or dynamically uniform.

Shaders have access to a wide variety of resources. They can access Textures, uniforms, uniform blocks, image variables, atomic counters, shader storage buffers, and potentially other information.

https://www.khronos.org/opengl/wiki/GLSL_Object

typo: "are explicit not part of any" explicit should be explicitly

glCreateProgram() creates a program object that is still to be filled with code.

glCreateShader(..) creates a shader object.

There are Program Pipeline objects.  Not quite clear what they're for yet.

https://www.khronos.org/opengl/wiki/Core_Language_(GLSL)

There's no recursion in shader functions.

function parameters are value-return.
Keywords in, out, and inout.

https://www.khronos.org/opengl/wiki/Vertex_Shader

User-defined input values to vertex shaders are sometimes called "vertex attributes". Their values are provided by issuing a drawing command while an appropriate vertex array object is bound

Use layout qualifiers if you want to have control how they are laid out.
(Cold this be related to their arrangement in the arguments to mat in triangles-01.rkt?

https://www.khronos.org/opengl/wiki/Face_Culling
GL_CULL_FACE must first be enabled with glEnable.
To select which side will be culled, use the following function:
void glCullFace(GLenum modeâ€‹);

https://www.khronos.org/opengl/wiki/Fragment_Shader

Use locatio(layout to specify he positions of the fragment output variables.

2018 01 31:

From glsltriangles there's the line
  (glVertexAttribPointer 0 2 GL_FLOAT #f 0 0)
Accordint to https://web.archive.org/web/20150225192608/http://www.arcsynthesis.org/gltut/Basics/Tut01%20Following%20the%20Data.html
this means:
* 0: ???
* 2: How many values specify a single datum.  In this case, two flating point values are the coordinates for a vartex.
* GL_FLOAT:  The base type of the value -- 32-bit floating point 
* #F: ???
* 0: the spacing between each set of values.  In this cse, none.
* 0: the byte offset in the buffer of the first object.  In tis case, the first obect is at the start.

WHich buffer? tha one currently bound to GL_ARRAY_BUFFER

2010 02 15

http://www.opengl-tutorial.org/beginners-tutorials/tutorial-4-a-colored-cube/
suggests very strongly that colours have to be in a different buffer from the vertices.
Not what I remembered from a while ago.
Seems unnecessarily awkward, keepint attributes so separated from the vertices.

2010 02 24

Stupid, stupid, stupid.

It seems that my questions about using openGL are answered in the Red Book and I didn't notice.
Why did I not realize to look there?
Because most of my books became inaccessible abut three years ago when I moved from a three-storey hose to a one-storey condo, and I've gotten used to doing without them and using internet sources exclusively.

So I finally ordered another copy.  This is much easier thatn going into the remote storage cell and actually *finding* my own copy.  The storage cell is many, many cubic metres of boxed junk.  And valuable stuff, which is unfortunately mixed intimately with the junk.  This whole situation makes it clear that I do have to go there and throw out the junk someday.  I don't want that task to fall to the executor of my estate.

I've started reading the epub version (paper copy on the way).  Epub isn't all that convenient for technical stuff, though it's just great for novels.  It has no idea how to format C++ code.  Or maybe my ebook screen isn't wide enough and I get too many line-wraps for the formatting to show well.  And it's even worse for mathematics.

2010 03 02

My paper redbook came.
I've downloaded the source code for the examples into ~/dv/redbook/OGLPG-9th-Edition/

Within that directory, the example source code resides in src; the include files are in include, and the C++ source code for the other files the source code relies on are in lib.

In particular, LoadShaders in in lib.

Now I caan start to experiment with using modern opengl directly.

.
